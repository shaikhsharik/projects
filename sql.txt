CREATE DB: - CREATE DATABASE mydb

===================================================


CREATE TABLE: - CREATE TABLE MyGuests (
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
firstname VARCHAR(30) NOT NULL,
lastname VARCHAR(30) NOT NULL,
email VARCHAR(50)
)
===================================================

INSERT DATA INTO TABLE


INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,...)

INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')



INSERT INTO myguests (firstname, lastname, email)
VALUES ('Joyyhn', 'Doe', 'john@example.com'),
 ('Jrrohn', 'Doe', 'john@example.com'),
 ('Joshn', 'Doe', 'john@example.com'),
 ('Johdddn', 'Doe', 'john@example.com')

===================================================


SELECT DATA:- 
Syntax: - select * from table_name
Clauses and operations: - where, in, distinct, order by, and, or etc

===================================================

Update:- 
Syntax: - UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;

UPDATE myguests set firstname= "sharik" where id=1
===================================================

DELETE:- 

DELETE FROM table_name WHERE condition;

===================================================

ALTER :- 

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

The ALTER TABLE statement is also used to add and drop various constraints on an existing table

ALTER TABLE - ADD Column
To add a column in a table, use the following syntax:
ALTER TABLE table_name
ADD column_name datatype;


ALTER TABLE - DROP COLUMN
To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):
ALTER TABLE table_name
DROP COLUMN column_name;


ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

===================================================

DROP table table_name

====================================================


EXPLAIN:-  Explains the structure of the table in details.
Syntax : Explain table_name

===================================================
CONSTRAINT

SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

The following constraints are commonly used in SQL:

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
CHECK - Ensures that all values in a column satisfies a specific condition - But ignored by some storage engines , you can check it in your code
DEFAULT - Sets a default value for a column when no value is specified


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);



CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);




CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);


CREATE TABLE Persons1 (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);



===================================================
VIEWS


CREATE VIEW personview AS
select Age from persons

UPDATE personview set Age=12

DROP VIEW view_name;

===================================================

INDEX

CREATE INDEX index_name ON table_name (column1, column2, ...);

CREATE INDEX idx_lastname ON Persons (LastName);

DROP INDEX idx_lastname ON table_name;

SHOW INDEX from persons
===================================================
